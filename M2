local Rayfield = loadstring(game:HttpGet('https://pastebin.com/raw/MUE0dHLN'))()

local Window = Rayfield:CreateWindow({
    Name = "Universe Hub",
    LoadingTitle = "Loading Universe",
    LoadingSubtitle = "Feito com bumbum",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "Universe Hub", -- Create a custom folder for your hub/game
        FileName = "Project Slayer",
        Rayfield:LoadConfiguration()
    }})

    local AutoBoss = Window:CreateTab("Auto Farm Boss")
    local FarmAll = Window:CreateTab("Auto Farm All")
    local killauraTab = Window:CreateTab("KillAura")
    local Bypasses = Window:CreateTab("Bypass")
    local ArrowGKA = Window:CreateTab("ArrowAura")
    local ArrowGKA2 = Window:CreateTab("ArrowAura2")

    local Misc = Window:CreateTab("Misc")
    local TeleportTween2 = Window:CreateTab("Tween TP")
    local Teleports2 = Window:CreateTab("Insta TP")
    
local player = game:GetService("Players").LocalPlayer;
local UIS = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")
local VIM =game:GetService("VirtualInputManager")
local ReplStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Imput = game:GetService("UserInputService")
local COREGUI = game:GetService("CoreGui")
local LP = game:GetService("Players").LocalPlayer
local HttpService = game:GetService("HttpService")
local RunS = game:GetService("RunService")
local X, Y = 0, 0
local Mouse = LP:GetMouse()
local GetLocalName = LP.Name
local request = (syn and syn.request) or (http and http.request) or http_request
local client = game:GetService("Players").LocalPlayer
local Plr = game:GetService("Players").LocalPlayer
local Data = game:GetService("ReplicatedStorage")["Player_Data"][game.Players.LocalPlayer.Name]
local Plr = game:GetService("Players").LocalPlayer
local TweenService = game:GetService("TweenService")
local Plr = game:GetService("Players").LocalPlayer
local Data = game:GetService("ReplicatedStorage")["Player_Data"][Plr.Name]
local Instance_new = Instance.new
local Vector3_new = Vector3.new
local CFrame_new = CFrame.new
local CFrame_Angles = CFrame.Angles
local coroutine_wrap = coroutine.wrap
local coroutine_yield = coroutine.yield
local coroutine_running = coroutine.running
local string_find = string.find
local string_match = string.match
local string_gsub = string.gsub
local string_sub = string.sub
local string_byte = string.byte
local string_split = string.split
local table_concat = table.concat
local table_insert = table.insert
local debug_traceback = debug.traceback
local math_rad = math.rad
local math_abs = math.abs
local math_floor = math.floor
local pog pog = nil
local game = game
local delay = delay
local wait = wait
local rawget = rawget
local error = error
local rawset = rawset
local assert = function(p1, p2, p3)
if not p1 then
error(p2, p3)
end
end
local newproxy = newproxy
local ipairs = ipairs
local getmetatable = getmetatable
local setmetatable = setmetatable
local tostring = tostring
local tonumber = tonumber
local type = type
local typeof = typeof
local pcall = pcall
local xpcall = xpcall
local setfenv = setfenv
local getfenv = getfenv
local workspace = workspace
local newcclosure = newcclosure or function(p1)
return coroutine_wrap(function(...)
while true do
coroutine_yield(p1(...))
end
end)
end
local workspace = workspace
local player = game.Players.LocalPlayer
local weapons = {}
local mobs = {}
local character = player.Character or player.CharacterAdded:Wait()
local client = game:GetService("Players").LocalPlayer
local user = client.Name
local TweenService = game:GetService("TweenService")
local noclipE = nil
local antifall = nil
local MoveTo = Instance_new("Model").MoveTo

function RN()
    mobs = {}
    for _,v in pairs(game:GetService("Workspace").Mobs:GetDescendants()) do -- LOOPS THROUGH ALL MOBS
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid").Health > 0 then
        insert = true -- VALUE TO CHECK THE MOB
        for _,v2 in pairs(mobs) do if v2.Name == v.Name or v2 == v then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
        if insert then table.insert(mobs, v) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
        end
    end
end
RN()

local function noclip()
    for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if v:IsA("BasePart") and v.CanCollide == true then
            v.CanCollide = false
            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
        end
    end
end

local function moveto(obj, speed)
    local info = TweenInfo.new(((client.Character.HumanoidRootPart.Position - obj.Position).Magnitude) / speed,Enum.EasingStyle.Linear)
    local tween = TweenService:Create(client.Character.HumanoidRootPart, info, {CFrame = obj})
    if not client.Character.HumanoidRootPart:FindFirstChild("BodyVelocity") then
        antifall = Instance.new("BodyVelocity", client.Character.HumanoidRootPart)
        antifall.Velocity = Vector3.new(0, 0, 0)
        noclipE = game:GetService("RunService").Stepped:Connect(noclip) 
        tween:Play()
        tween.Completed:Wait()
        antifall:Destroy()
        noclipE:Disconnect()
    end
end

function findMob()
    local largest = math.huge
    local closestChild = nil
    local hrp = character:WaitForChild("HumanoidRootPart")
    for i, v in pairs(game:GetService("Workspace").Mobs:GetDescendants()) do
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid").Health > 0 and v.Name == getgenv().Selected then
            local magnitude = (character.HumanoidRootPart.Position - v:GetBoundingBox().Position).magnitude
            if magnitude < largest then
                closestChild = v
                largest = magnitude
            end
        end
    end
    return closestChild
end

function findBoss()
    local largest = math.huge
    local closestChild = nil
    local hrp = character:WaitForChild("HumanoidRootPart")
    for i, v in pairs(game:GetService("Workspace").Mobs.Bosses:GetDescendants()) do
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid").Health > 0 then
            if v.Name == "Akeza" or v.Name == "Rengoku" or v.Name == "Douma" or v.Name == "Tengen" then
                closestChild = v
                return closestChild
            end
            local magnitude = (character.HumanoidRootPart.Position - v:GetBoundingBox().Position).magnitude
            if magnitude < largest then
                closestChild = v
                largest = magnitude
            end
        end
    end
    return closestChild
end

function findMob1()
    local largest = math.huge
    local closestChild = nil
    local hrp = character:WaitForChild("HumanoidRootPart")
    for i, v in pairs(game:GetService("Workspace").Mobs:GetDescendants()) do
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid").Health > 0 then
            local magnitude = (character.HumanoidRootPart.Position - v:GetBoundingBox().Position).magnitude
            if magnitude < largest then
                closestChild = v
                largest = magnitude
            end
        end
    end
    return closestChild
end

Skills = {
    Z = false,
    X = false,
    C = false,
    V = false,
    B = false,
    N = false,
}
local mod = require(game:GetService("ReplicatedStorage").Modules.Server["Skills_Modules_Handler"])
getrenv()._G.handle_irregular = nil
getrenv()._G.cuasdamsndasdasd = nil

_G.cuasdamsndasdasd = function()
    return
end

_G.handle_irregular = function()
    return false
end

mod.Kick = function()
    return
end

game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"]["Client_Global_utility"].Disabled = true
game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"]["client_global_delete_script"].Disabled = true
game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"]["Client_Global_utility"]:GetPropertyChangedSignal("Disabled"):Connect(function()
game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"]["Client_Global_utility"].Disabled = true
game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"]["client_global_delete_script"].Disabled = true
end)

value = "Above"
mode = value

AutoBoss:CreateToggle({
    Name = "Farm All Boss",
    Callback = function (v)
        getgenv().FarmAllBosses = v
        local Humanoid = character.Humanoid
        local hrp = character:WaitForChild("HumanoidRootPart")
        while task.wait() do
            if getgenv().FarmAllBosses == false then return end

            local mob = findBoss()
            if mob == nil then
                while task.wait() do
                    task.wait()
                    if getgenv().FarmAllBosses == false then return end
                    if findBoss() ~= nil then break end
                end
            else
                while wait() do
                    task.wait()

                    if getgenv().FarmAllBosses == false then return end

                    if mob and mob:FindFirstChild("Humanoid") ~= nil and mob:FindFirstChild("Humanoid").Health > 0 then
                        local ehum = mob:WaitForChild("Humanoid")
                        local character = player.Character
                        local hrp = character:WaitForChild("HumanoidRootPart")
                        
                        if mode == "Above" then
                            repeat
                                task.wait()
                                local character = player.Character
                                local hrp = character:WaitForChild("HumanoidRootPart")
                                local magnitude = (character.HumanoidRootPart.Position - mob:GetModelCFrame().Position).magnitude
                                if magnitude > 20 then
                                    moveto(mob:GetModelCFrame() * CFrame.new(0, tonumber(getgenv().dist), 0) * CFrame.Angles(math.rad(-90), 0, 0), 300)
                                else
                                    hrp.CFrame = mob:GetModelCFrame() * CFrame.new(0, tonumber(getgenv().dist), 0) * CFrame.Angles(math.rad(-90), 0, 0)
                                end
                            until not FarmAllBosses or mob:FindFirstChild("Humanoid").Health <= 0
                        elseif mode == nil then
                            game.StarterGui:SetCore()
                        end
                    else
                        break
                    end
                end
            
            end
            task.wait()
        end
    end
})

AutoBoss:CreateToggle({
    Name = "Farm All Boss (Above)",
    Callback = function (v)
        getgenv().FarmAllBosses = v
        local Humanoid = character.Humanoid
        local hrp = character:WaitForChild("HumanoidRootPart")
        while task.wait() do
            if getgenv().FarmAllBosses == false then return end

            local mob = findBoss()
            if mob == nil then
                while task.wait() do
                    task.wait()
                    if getgenv().FarmAllBosses == false then return end
                    if findBoss() ~= nil then break end
                end
            else
                while wait() do
                    task.wait()

                    if getgenv().FarmAllBosses == false then return end

                    if mob and mob:FindFirstChild("Humanoid") ~= nil and mob:FindFirstChild("Humanoid").Health > 0 then
                        local ehum = mob:WaitForChild("Humanoid")
                        local character = player.Character
                        local hrp = character:WaitForChild("HumanoidRootPart")
                        
                        if mode == "Above" then
                            repeat
                                task.wait()
                                local character = player.Character
                                local hrp = character:WaitForChild("HumanoidRootPart")
                                local magnitude = (character.HumanoidRootPart.Position - mob:GetModelCFrame().Position).magnitude
                                if magnitude > 20 then
                                    moveto(mob:GetModelCFrame() * CFrame.new(0, 10, 0) * CFrame.Angles(math.rad(-90), 0, 0), 300)
                                else
                                    hrp.CFrame = mob:GetModelCFrame() * CFrame.new(0, 10, 0) * CFrame.Angles(math.rad(-90), 0, 0)
                                end
                            until not FarmAllBosses or mob:FindFirstChild("Humanoid").Health <= 0
                        elseif mode == nil then
                            game.StarterGui:SetCore()
                        end
                    else
                        break
                    end
                end
            
            end
            task.wait()
        end
    end
})

AutoBoss:CreateToggle({
    Name = "Farm All Boss (Front)",
    Callback = function (v)
        getgenv().FarmAllBosses = v
        local Humanoid = character.Humanoid
        local hrp = character:WaitForChild("HumanoidRootPart")
        while task.wait() do
            if getgenv().FarmAllBosses == false then return end

            local mob = findBoss()
            if mob == nil then
                while task.wait() do
                    task.wait()
                    if getgenv().FarmAllBosses == false then return end
                    if findBoss() ~= nil then break end
                end
            else
                while wait() do
                    task.wait()

                    if getgenv().FarmAllBosses == false then return end

                    if mob and mob:FindFirstChild("Humanoid") ~= nil and mob:FindFirstChild("Humanoid").Health > 0 then
                        local ehum = mob:WaitForChild("Humanoid")
                        local character = player.Character
                        local hrp = character:WaitForChild("HumanoidRootPart")
                        
                        if mode == "Above" then
                            repeat
                                task.wait()
                                local character = player.Character
                                local hrp = character:WaitForChild("HumanoidRootPart")
                                local magnitude = (character.HumanoidRootPart.Position - mob:GetModelCFrame().Position).magnitude
                                if magnitude > 20 then
                                    moveto(mob:GetModelCFrame() * CFrame.new(0, 10, 0) * CFrame.Angles(math.rad(-90), 0, 0), 300)
                                    
                                else
                                    hrp.CFrame = mob:GetModelCFrame() * CFrame.new(0, 0, -8) * CFrame.Angles(0, math.rad(180), 0)

                                end
                            until not FarmAllBosses or mob:FindFirstChild("Humanoid").Health <= 0
                            noclipE:Disconnect()
                        elseif mode == nil then
                            game.StarterGui:SetCore()
                        end
                    else
                        break
                    end
                end
            
            end
            task.wait()
        end
    end
})

------------------KillAura--------------------
killauraTab:CreateToggle({
    Name = "Thunder Aura",
    CurrentValue = false,
    Callback = function(v)
        _G.thunderkillaura = v
        thunderglobal()
    end
})

killauraTab:CreateLabel("KillAura Safe")

killauraTab:CreateToggle({
    Name = "Fist",
    Flag = "",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "fist_combat" 
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle

        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
       game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash") 
        wait(0.8)
    getgenv().dist = 30
        wait(0.3)
    wait(1) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})

killauraTab:CreateToggle({
    Name = "Sword",
    Flag = "",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "Sword_Combat_Slash"
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle

        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
       game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash") 
        wait(0.8)
    getgenv().dist = 30
        wait(0.3)
    wait(1) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})

killauraTab:CreateToggle({
    Name = "Fans (CAN KICK)",
    Flag = "",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "fans_combat_slash"
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle

        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
       game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash") 
        wait(0.8)
    getgenv().dist = 30
        wait(0.3)
    wait(1) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})

killauraTab:CreateToggle({
    Name = "Scythe",
    Flag = "",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "Scythe_Combat_Slash"
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle

        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
       game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash") 
        wait(0.8)
    getgenv().dist = 30
        wait(0.3)
    wait(1) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})

killauraTab:CreateToggle({
    Name = "Claw",
    Flag = "",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "claw_Combat_Slash"
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle

        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
       game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash") 
        wait(0.8)
    getgenv().dist = 30
        wait(0.3)
    wait(1) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})

killauraTab:CreateLabel("KillAura OP")

killauraTab:CreateToggle({
    Name = "Fist",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "fist_combat" 
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle
        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.5)
        getgenv().dist = 30
    wait(1.2) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})
killauraTab:CreateToggle({
    Name = "Sword",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "Sword_Combat_Slash"
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle
        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.5)
        getgenv().dist = 30
    wait(1.2) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})
killauraTab:CreateToggle({
    Name = "Fans (Kickable)",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "fans_combat_slash" 
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle
        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.5)
        getgenv().dist = 30
    wait(1.2) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})
killauraTab:CreateToggle({
    Name = "Scythe",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "Scythe_Combat_Slash" 
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle
        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.5)
        getgenv().dist = 30
    wait(1.2) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})
killauraTab:CreateToggle({
    Name = "Claw",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "claw_Combat_Slash" 
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle
        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.5)
        getgenv().dist = 30
    wait(1.2) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})
--------------------------- Teleports2 -----------------------------
Teleports2:CreateButton({
    Name = "SoundCave",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame =CFrame.new(1816.21204, 486.852661, -2757.24072, 0.529325187, 0, -0.848419011, 0, 1, 0, 0.848419011, 0, 0.529325187)
    end
})
Teleports2:CreateButton({
    Name = "Devourer's Jaw",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame =CFrame.new(481.2453, 507.410645, -1868.00842, 0.658433616, 0, 0.752638876, 0, 1, 0, -0.752638757, 0, 0.658433676)

    end
})
Teleports2:CreateButton({
    Name = "Beast Cave",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(1644.35266, 299.606079, -350.906494, -0.999853849, 0, 0.0171020534, 0, 1.00000012, 0, -0.0171020553, 0, -0.99985373)

    end
})
Teleports2:CreateButton({
    Name = "Frozen Lake",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(2703, 675, -701)
    end
})
Teleports2:CreateButton({
    Name = "Nomway Village",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(3562, 673, -2109)
    end
})
Teleports2:CreateButton({
    Name = "Wop City",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(-31, 601, -431)
    end
})
Teleports2:CreateButton({
    Name = "Cave 1",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(4222, 674, 582)
    end
})
Teleports2:CreateButton({
    Name = "Cave 2",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(1183, 487, -1192)
    end
})
Teleports2:CreateButton({
    Name = "Tsune Village",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(1214, 569, 77)
    end
})
Teleports2:CreateButton({
    Name = "Akeza Cave",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(1933, 556, -142)
    end
})
Teleports2:CreateButton({
    Name = "Wop Training Grounds",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(224, 597, 483)
    end
})
Teleports2:CreateButton({
    Name = "Mugay Train",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(733, 500, 1056)
    end
})
Teleports2:CreateButton({
    Name = "Mist Training",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(4328.71973, 672.657471, -566.535889, 0.551638365, 0, 0.834083378, 0, 1, 0, -0.834083378, 0, 0.551638365)
    end
})
Teleports2:CreateButton({
    Name = "Split Boulder",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(1257.22046, 497.445526, -271.497253, -0.995884061, 0, 0.090637207, 0, 1.00000012, 0, -0.090637207, 0, -0.995884061)
    end
})
Teleports2:CreateButton({
    Name = "Meditate",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(130.404846, 599.6427, 520.139404, -0.573853314, 0, 0.818958104, 0, 1, 0, -0.818958223, 0, -0.573853254)
    end
})

Teleports2:CreateButton({
    Name = "Stuck Place Akeza",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame =CFrame.new(2080.3894, 535.626282, -110.452385)
    end
})

Teleports2:CreateButton({
    Name = "Stuck Place Mugay Train",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame =CFrame.new(706.238281, 511.73587, 1135.88721)
    end
})

Teleports2:CreateButton({
    Name = "Stuck Place Akeza 2",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame =CFrame.new(2013.37976, 482.645813, -108.943802)
    end
})

game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_C:FireServer(ohString1, ohNumber2, ohString3, ohCFrame4, ohInstance5)

TeleportTween2:CreateButton({
    Name = "SoundCave",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(1816.21204, 486.852661, -2757.24072)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Devourer's Jaw",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(481.2453, 507.410645, -1868.00842)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Beast Cave",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(1644.35266, 299.606079, -350.906494)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Frozen Lake",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(2703, 675, -701)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Nomway Village",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(3562, 673, -2109)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Wop City",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(-31, 601, -431)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Cave 1",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(4222, 674, 582)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Cave 2",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(1183, 487, -1192)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Tsune Village",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(1214, 569, 77)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Akeza Cave",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(1933, 556, -142)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Wop Training Grounds",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(224, 597, 483)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Mugay Train",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(733, 500, 1056)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Mist Training",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(4328.71973, 672.657471, -566.535889)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Split Boulder",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(1257.22046, 497.445526, -271.497253)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween2:CreateButton({
    Name = "Meditate",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(130.404846, 599.6427, 520.139404)

        ImprovedTeleport(targetPosition)
    end
})

Misc:CreateButton({
    Name = "GamePass Unlocker",
    Callback = function()
        local player = game.Players.LocalPlayer

    local gamepass1 = Instance.new("StringValue")
    local gamepass3 = Instance.new("StringValue")
    local gamepass4 = Instance.new("StringValue")
    local gamepass5 = Instance.new("StringValue")
    gamepass1.Name = "18589360"
    gamepass3.Name = "18710993"
    gamepass4.Name = "19241624"
    gamepass5.Name = "46503236"
    gamepass1.Parent = player.gamepasses
    gamepass3.Parent = player.gamepasses
    gamepass4.Parent = player.gamepasses
    gamepass5.Parent = player.gamepasses

    --18589360 = Concentração Total Gamepass Z
    --18710993 = Disable Uniform
    --19241624 = Gourd Durability Viewer Z
    --46503236 = Skip Spin Z

    end
})

local Button = Misc:CreateButton({
    Name = "Anti AFK",
    Callback = function()
        local bb = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            bb:CaptureController()
            bb:ClickButton2(Vector2.new())
        end)
    end,
})

Misc:CreateToggle({
    Name = "AutoCollect",
    CurrentValue = false,
    Callback = function(Value)
        getgenv().AutoCollectChest = Value
    end,
})

spawn(function()
    while task.wait() do
        if getgenv().AutoCollectChest then
            for _, v in pairs(game:GetService("Workspace").Debree:GetChildren()) do
                if v.Name == "Loot_Chest" then
                    for _, c in pairs(v:FindFirstChild("Drops"):GetChildren()) do
                        local args = { [1] = c.Name }
                        v["Add_To_Inventory"]:InvokeServer(unpack(args))
                    end
                end
            end
        end
    end
end)

Misc:CreateToggle({
    Name = "Inf Stamina",
    Callback = function (bool)
        if bool then
            if not isRunning then
                isRunning = true
                staminaLoop = coroutine.wrap(function()
                    while isRunning do
                        getrenv()._G:Stamina(-1)
                        task.wait()
                    end
                end)
                staminaLoop()
            end
        else
            if isRunning then
                isRunning = false
            end
        end
    end
})

Misc:CreateToggle({
    Name = "Inf Breathing",
    Callback = function (bool)
        isBreathing = bool
    end
})

spawn(function()
    while wait() do
        if isBreathing then
            getrenv()._G.AddBreath("gpthebest", 50)
        end
    end
end)

local Toggle = Misc:CreateToggle({
    Name = "No Sun Burn",
    CurrentValue = false,
    Callback = function(value)
       if value then
        game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"].Gameplay["Sun_Damage"].Disabled = true
       else
        game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"].Gameplay["Sun_Damage"].Disabled = false
       end
    end,
 })

Misc:CreateToggle({
    Name = "NoCoolDown(DONT SPAM!!)",
    Callback = function (bool)
        getgenv().NoCdMoves = bool -- Atualiza o estado da variável NoCdMoves com o valor do toggle

        -- Verifica se a função oldindex já foi definida
        if oldindex then
            return -- Se já foi definida, apenas retorna
        end
    
        -- Define a função original __index como oldindex
        oldindex = hookmetamethod(game, "__index", function(index, value)
            if tostring(index) == "LastUsed" and getgenv().NoCdMoves then
                return 0
            end
            return oldindex(index, value)
        end)
    end
})

local Toggle = Misc:CreateToggle({
    Name = "Auto Meditate",
    CurrentValue = false,
    Callback = function(bool)
        getgenv().AutoMeditate = bool
    end,
})

function exec()
    while wait() do
        if getgenv().AutoMeditate then
            pcall(function()
                game:GetService("Players").LocalPlayer.PlayerGui.ExcessGuis["Meditate_gui"].Holder.LocalScript.Value.Value = 100
            end)
        end
    end
end

spawn(exec)

local Toggle = Misc:CreateToggle({
    Name = "Auto Split",
    CurrentValue = false,
    Callback = function(bool)
       getgenv().AutoSplit = bool
    end,
 })
 
 function exec()
    while task.wait() do
       if getgenv().AutoSplit then
          pcall(function()
             game:GetService("Players").LocalPlayer.PlayerGui.ExcessGuis["boulder_split_ui"].Holder.LocalScript.Value.Value = 10000
          end)
       end
    end
 end
 
 spawn(exec)

 local Toggle = Misc:CreateToggle({
    Name = "No Drown",
    CurrentValue = false,
    Callback = function()
       getgenv().NoDrown = not getgenv().NoDrown
    end,
})
 
task.spawn(function()
    while true do
       for i, v in next, getgc(true) do
          if type(v) == "table" and rawget(v, "swim_bar") then
             if getgenv().NoDrown then
                rawset(v, "swim_bar", {
                   [1] = 2,
                   [2] = 2
                })
             end
          end
       end
       task.wait(6) -- Adiciona um intervalo de espera de 0.1 segundos
    end
end)

local vim = game:GetService('VirtualInputManager')
local rs = game:GetService('RunService')
local clash = false

local function pressKey(key)
    vim:SendKeyEvent(true, key, false, game)
    wait()
    vim:SendKeyEvent(false, key, false, game)
end

local function instanced()
    while clash do
        rs.Heartbeat:Wait(0.3)
        pressKey(Enum.KeyCode[game.Players.LocalPlayer.PlayerGui["universal_client_scripts"].Clashing2["Clash_Ui2"].Holder:WaitForChild('Front').Text])
    end
end

local Toggle = Misc:CreateToggle({
    Name = "AutoClash",
    CurrentValue = false,
    Callback = function(Value)
        clash = Value
        if clash then
            instanced()
        end
    end,
})

CurrentValue = false

local playerName = game.Players.LocalPlayer.Name

local function changeValue(instance, value)
    local args = {"Change_Value", instance, value}
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(unpack(args))
end

local function changeColorSmoothly(instance, targetValue, duration)
    local initialValue = instance.Value
    local step = (targetValue - initialValue) / (duration / 0.01)
    local currentTime = 0

    while currentTime < duration do
        instance.Value = instance.Value + step
        changeValue(instance, instance.Value)
        wait(0.01)
        currentTime = currentTime + 0.01
    end
end

local skinColor = game:GetService("ReplicatedStorage").Player_Data[playerName].Customization.Skin_Color

local toggleEnabled = false

local function toggleScript()
    toggleEnabled = not toggleEnabled
    if toggleEnabled then
        spawn(function()
            while toggleEnabled do
                changeColorSmoothly(skinColor.R, math.random(), 0.15)
                changeColorSmoothly(skinColor.G, math.random(), 0.15)
                changeColorSmoothly(skinColor.B, math.random(), 0.15) 
            end
        end)
    end
end

local Toggle = Misc:CreateToggle({
    Name = "RGB Skin",
    CurrentValue = false,
    Callback = toggleScript,
})
 
Misc:CreateLabel("Buffs")

local Button = Misc:CreateButton({
    Name = "Wagon God (Activator)",
    Callback = function()
        local player = game:GetService("Players").LocalPlayer

        local ohString1 = "AddQuest"
        local ohString2 = "Players." .. player.Name .. ".PlayerGui.Npc_Dialogue.LocalScript.Functions"
        local ohNumber3 = 18455.7521223
        local ohInstance4 = game:GetService("ReplicatedStorage").Player_Data[player.Name].Quest
        local ohTable5 = {
            ["List"] = {
                [1] = {
                    ["Name"] = "Deliver wagon",
                    ["Progress"] = {
                        [1] = 0,
                        [2] = 1
                    }
                }
            },
            ["Current"] = "Deliver grandpa Wagwon's wagon"
        }

        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohString2, ohNumber3, ohInstance4, ohTable5)

        wait(0.4)

        local player = game.Players.LocalPlayer
        local wagonName = player.Name .. "'s Wagon"
        local wagon = player.Character:FindFirstChild(wagonName)
        if wagon then
            wagon:Destroy()
        end

        wait(0.2)

        local player = game.Players.LocalPlayer
        local playerGui = player.PlayerGui
        local quest = playerGui.Menu.Quest

        if quest then
            quest:Destroy()
        end
    end,
})

local ToggleSwampyEnabled = false
local ToggleDreamEnabled = false
local ToggleIceEnabled = false
local ToggleSoundEnabled = false
local ToggleShockWaveEnabled = false

local AutoInvincibleSwampy = Misc:CreateToggle({
    Name = "Invincible (Swampy)",
    CurrentValue = false,
    Callback = function(v)
        ToggleSwampyEnabled = v
        
        if ToggleSwampyEnabled then
            ToggleDreamEnabled = false
            ToggleIceEnabled = false
            ToggleSoundEnabled = false
            ToggleShockWaveEnabled = false
            toggleInvincibleSwampy()
        end
    end
})

local AutoInvincibleDream = Misc:CreateToggle({
    Name = "Invincible (Dream)",
    CurrentValue = false,
    Callback = function(v)
        ToggleDreamEnabled = v
        
        if ToggleDreamEnabled then
            ToggleSwampyEnabled = false
            ToggleIceEnabled = false
            ToggleSoundEnabled = false
            ToggleShockWaveEnabled = false
            toggleInvincibleDream()
        end
    end
})

local AutoInvincibleIce = Misc:CreateToggle({
    Name = "Invincible (Ice)",
    CurrentValue = false,
    Callback = function(v)
        ToggleIceEnabled = v
        
        if ToggleIceEnabled then
            ToggleSwampyEnabled = false
            ToggleDreamEnabled = false
            ToggleSoundEnabled = false
            ToggleShockWaveEnabled = false
            toggleInvincibleIce()
        end
    end
})

local AutoInvincibleSound = Misc:CreateToggle({
    Name = "Invincible (Sound)",
    CurrentValue = false,
    Callback = function(v)
        ToggleSoundEnabled = v
        
        if ToggleSoundEnabled then
            ToggleSwampyEnabled = false
            ToggleDreamEnabled = false
            ToggleIceEnabled = false
            ToggleShockWaveEnabled = false
            toggleInvincibleSound()
        end
    end
})

local AutoInvincibleShockWave = Misc:CreateToggle({
    Name = "Invincible (ShockWave)",
    CurrentValue = false,
    Callback = function(v)
        ToggleShockWaveEnabled = v
        
        if ToggleShockWaveEnabled then
            ToggleSwampyEnabled = false
            ToggleDreamEnabled = false
            ToggleIceEnabled = false
            ToggleSoundEnabled = false
            toggleInvincibleShockWave()
        end
    end
})

function toggleInvincibleSwampy()
    while ToggleSwampyEnabled do
        local ohString1 = "skil_ting_asd"
        local ohInstance2 = game:GetService("Players").LocalPlayer
        local ohString3 = "swamp_bda_swamp_domain"
        local ohNumber4 = 1
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
        task.wait(0.5)
    end
end

function toggleInvincibleDream()
    while ToggleDreamEnabled do
        local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "dream_bda_flesh_monster",
            [4] = 1
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
        task.wait(0.5)
    end
end

function toggleInvincibleIce()
    while ToggleIceEnabled do
        local ohString1 = "skil_ting_asd"
        local ohInstance2 = game:GetService("Players").LocalPlayer
        local ohString3 = "ice_demon_art_bodhisatva"
        local ohNumber4 = 1
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
        task.wait(0.5)
    end
end

function toggleInvincibleSound()
    while ToggleSoundEnabled do
        local ohString1 = "skil_ting_asd"
        local ohInstance2 = game:GetService("Players").LocalPlayer
        local ohString3 = "sound_breathing_smoke_screen"
        local ohNumber4 = 1
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
        task.wait(0.5)
    end
end

function toggleInvincibleShockWave()
    while ToggleShockWaveEnabled do
        local A_1 = "skil_ting_asd"
        local A_2 = game:GetService("Players").LocalPlayer
        local A_3 = "akaza_bda_compass_needle"
        local A_4 = 1
        local Event = game:GetService("ReplicatedStorage").Remotes["To_Server"]["Handle_Initiate_S"]
        Event:FireServer(A_1, A_2, A_3, A_4)
        task.wait(0.5)
    end
end

local Toggle = Misc:CreateToggle({
   Name = "Invencible (Scythe)",
   CurrentValue = false,
   Callback = function(enabled)
      if enabled then
         ScytheGod = true
         while ScytheGod do
local ohString1 = "skil_ting_asd"
local ohInstance2 = game:GetService("Players").LocalPlayer
local ohString3 = "scythe_asteroid_reap"
local ohNumber4 = 1
game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
            task.wait(0.5)
         end
      else
         ScytheGod = false
      end
   end,
})

local Toggle = Misc:CreateToggle({
   Name = "Invencible (Water)",
   CurrentValue = false,
   Callback = function(enabled)
      if enabled then
         WaterGod = true
         while WaterGod do
            local ohString1 = "skil_ting_asd"
            local ohInstance2 = game:GetService("Players").LocalPlayer
            local ohString3 = "Water_fall_basin"
            local ohNumber4 = 1
            game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
            task.wait(0.5)
         end
      else
         WaterGod = false
      end
   end,
})

Misc:CreateToggle({
    Name = "GodMode (Kamado)",
    CurrentValue = false,
    SectionParent = Settings,
    Callback = function(v)
        getgenv().god = v
        if getgenv().god then
            local ohBoolean1 = true

            game:GetService("ReplicatedStorage").Remotes.heal_tang123asd:FireServer(ohBoolean1)
        elseif not getgenv().god then
            local ohBoolean1 = false

            game:GetService("ReplicatedStorage").Remotes.heal_tang123asd:FireServer(ohBoolean1)
        end
end
})

Misc:CreateToggle({
    Name = "Inf Breath Regen",
    Callback = function (bool)
        if bool then
            toggleActive = true
            toggleBreathing()
        else
            toggleActive = false
        end
    
    function toggleBreathing()
        if toggleActive then
            game:GetService("ReplicatedStorage").Remotes.regeneration_breathing_remote:FireServer(true)
            wait(25)
            game:GetService("ReplicatedStorage").Remotes.regeneration_breathing_remote:FireServer(false)
            wait(0.01) -- Aguarda uma pequena fração de segundo para evitar uma chamada imediata ao loop
            toggleBreathing()
        end
    end
    end
})

Misc:CreateToggle({
    Name = "WarFans Buff",
    Callback = function (bool)
        toggleActivated = bool -- Atualiza o estado do toggle

    if toggleActivated then
        running = true -- Inicia o loop
        while running do -- Executa o loop enquanto running for verdadeiro
            game:GetService("ReplicatedStorage").Remotes.war_Drums_remote:FireServer(true)
            wait(20.1) -- Aguarda um tempo antes de reiniciar o buff (ajuste conforme necessário)
        end
    else
        running = false -- Interrompe o loop
        game:GetService("ReplicatedStorage").Remotes.war_Drums_remote:FireServer(false)
    end
    end
})

Misc:CreateToggle({
    Name = "Rengoku (Human)",
    Callback = function (bool)
        toggleActivated = bool -- Atualiza o estado do toggle

    if toggleActivated then
        running = true -- Inicia o loop
        while running do -- Executa o loop enquanto running for verdadeiro
            game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(true)
            wait(28) -- Aguarda um tempo antes de reiniciar o buff (ajuste conforme necessário)
            game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(false)
            wait(3)
        end
    else
        running = false -- Interrompe o loop
        game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(false)
    end
    end
})

Misc:CreateToggle({
    Name = "GodSpeed (Human)",
    Callback = function (bool)
        toggleActivated = bool -- Atualiza o estado do toggle

        local args = {
            [1] = toggleActivated
        }

        game:GetService("ReplicatedStorage").Remotes.thundertang123:FireServer(args[1])
    end
})

Misc:CreateLabel("AutoSkil")

local AutoSkill = Misc:CreateToggle({
    Name = "Enable Auto Skill",
    CurrentValue = false,
    SectionParent = Miscs,
    Flag = "Skills",
    Callback = function(value)
        using_move = false
        stop_kill_aura = false
        _G.SkillMastery = value
        while _G.SkillMastery and task.wait() do
            for i,v in next, Skills do
                if v then
                    using_move = true
                end
                game:GetService("VirtualInputManager"):SendKeyEvent(v, i, false, game)
                using_move = false
                game:GetService("VirtualInputManager"):SendKeyEvent(false, i, false, game)
            end
        end
    end,
})

for i,v in next, Skills do
    local AutoUse = Misc:CreateToggle({
        Name = "Auto " .. i,
        CurrentValue = false,
        SectionParent = Miscs,
        Flag = "Skills",
        Callback = function(value)
            Skills[i] = value
        end,
    })
end

local Toggle = Bypasses:CreateToggle({
    Name = "Bypass Arrow",
    CurrentValue = false,
    Callback = function(Value)
        _G.bypass = Value
 
        if _G.bypass then
            while _G.bypass do
                local ohString1 = "skil_ting_asd"
                local ohInstance2 = game:GetService("Players").LocalPlayer
                local ohString3 = "arrow_knock_back"
                local ohNumber4 = 5
 
                game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohString3, ohNumber4)
 
                wait(8)
            end
        end
    end,
 })
 
local Toggle = ArrowGKA:CreateToggle({
    Name = "Inosuke",
    CurrentValue = false,
    Callback = function(Value)
        isRunning = Value -- Atualiza o estado de execução com o valor do toggle
 
        if isRunning then
            while isRunning do
                local success, error = pcall(function()
                    local ohString1 = "arrow_knock_back_damage"
                    local ohInstance2 = game:GetService("Players").LocalPlayer
                    local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    local ohInstance4 = game:GetService("Workspace").Mobs.Bosses.Inosuke.Inosuke
                    local ohNumber5 = 999999999
                    local ohNumber6 = 999999999
 
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
                end)
 
                if not success then
                    -- Lida com erros, se houver
                end
 
                if someCondition then
                    isRunning = false
                end
 
                wait(0.001)
            end
        end
    end,
 })

 local Toggle = ArrowGKA:CreateToggle({
    Name = "Muichiro",
    CurrentValue = false,
    Callback = function(Value)
        isRunning = Value
 
        if isRunning then
            while isRunning do
                local success, error = pcall(function()
                    local ohString1 = "arrow_knock_back_damage"
                    local ohInstance2 = game:GetService("Players").LocalPlayer
                    local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    local ohInstance4 = game:GetService("Workspace").Mobs.Bosses.Muichiro["Muichiro Tokito"]
                    local ohNumber5 = 999999999
                    local ohNumber6 = 999999999
 
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
                end)
 
                if not success then
                end
 
                if someCondition then
                    isRunning = false
                end
 
                wait(0.001)
            end
        end
    end,
 })

 local Toggle = ArrowGKA:CreateToggle({
    Name = "Sound Trainer",
    CurrentValue = false,
    Callback = function(Value)
        isRunning = Value
 
        if isRunning then
            while isRunning do
                local success, error = pcall(function()
                    local ohString1 = "arrow_knock_back_damage"
                    local ohInstance2 = game:GetService("Players").LocalPlayer
                    local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    local ohInstance4 = game:GetService("Workspace").Mobs.Bosses["Sound_Trainee"]["Sound Trainee"]["Sound Trainee"]
                    local ohNumber5 = 999999999
                    local ohNumber6 = 999999999
 
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
                end)
 
                if not success then
                end
 
                if someCondition then
                    isRunning = false
                end
 
                wait(0.001)
            end
        end
    end,
 })

 local Toggle = ArrowGKA:CreateToggle({
    Name = "Snow Trainer",
    CurrentValue = false,
    Callback = function(Value)
        isRunning = Value
 
        if isRunning then
            while isRunning do
                local success, error = pcall(function()
                    local ohString1 = "arrow_knock_back_damage"
                    local ohInstance2 = game:GetService("Players").LocalPlayer
                    local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    local ohInstance4 = game:GetService("Workspace").Mobs.Bosses["Snow_Trainee"]["Snow Trainee"]["Snow Trainee"]
                    local ohNumber5 = 999999999
                    local ohNumber6 = 999999999
 
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
                end)
 
                if not success then
                end
 
                if someCondition then
                    isRunning = false
                end
 
                wait(0.001)
            end
        end
    end,
 })

 local Toggle = ArrowGKA:CreateToggle({
    Name = "Swampy",
    CurrentValue = false,
    Callback = function(Value)
        isRunning = Value
 
        if isRunning then
            while isRunning do
                local success, error = pcall(function()
                    local ohString1 = "arrow_knock_back_damage"
                    local ohInstance2 = game:GetService("Players").LocalPlayer
                    local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    local ohInstance4 = game:GetService("Workspace").Mobs.Bosses.Swampy.Swampy
                    local ohNumber5 = 999999999
                    local ohNumber6 = 999999999
 
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
                end)
 
                if not success then
                end
 
                if someCondition then
                    isRunning = false
                end
 
                wait(0.001)
            end
        end
    end,
 })

 local Toggle = ArrowGKA:CreateToggle({
    Name = "Renpeke",
    CurrentValue = false,
    Callback = function(Value)
        isRunning = Value
 
        if isRunning then
            while isRunning do
                local success, error = pcall(function()
                    local ohString1 = "arrow_knock_back_damage"
                    local ohInstance2 = game:GetService("Players").LocalPlayer
                    local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    local ohInstance4 = game:GetService("Workspace").Mobs.Bosses["Flame Trainee"].Renpeke
                    local ohNumber5 = 999999999
                    local ohNumber6 = 999999999
 
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
                end)
 
                if not success then
                end
 
                if someCondition then
                    isRunning = false
                end
 
                wait(0.001)
            end
        end
    end,
 })

 local Toggle = ArrowGKA:CreateToggle({
    Name = "Akeza",
    CurrentValue = false,
    Callback = function(Value)
        isRunning = Value
 
        if isRunning then
            while isRunning do
                local success, error = pcall(function()
                    local ohString1 = "arrow_knock_back_damage"
                    local ohInstance2 = game:GetService("Players").LocalPlayer
                    local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    local ohInstance4 = game:GetService("Workspace").Mobs.Bosses.Akaza.Akeza
                    local ohNumber5 = 999999999
                    local ohNumber6 = 999999999
 
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
                end)
 
                if not success then
                end
 
                if someCondition then
                    isRunning = false
                end
 
                wait(0.001)
            end
        end
    end,
 })

 local Toggle = ArrowGKA:CreateToggle({
    Name = "Rengoku",
    CurrentValue = false,
    Callback = function(Value)
        isRunning = Value
 
        if isRunning then
            while isRunning do
                local success, error = pcall(function()
                    local ohString1 = "arrow_knock_back_damage"
                    local ohInstance2 = game:GetService("Players").LocalPlayer
                    local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    local ohInstance4 = game:GetService("Workspace").Mobs.Bosses.Rengoku.Rengoku
                    local ohNumber5 = 999999999
                    local ohNumber6 = 999999999
 
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
                end)
 
                if not success then
                end
 
                if someCondition then
                    isRunning = false
                end
 
                wait(0.001)
            end
        end
    end,
 })

 local Toggle = ArrowGKA:CreateToggle({
    Name = "Tengen",
    CurrentValue = false,
    Callback = function(Value)
        isRunning = Value
 
        if isRunning then
            while isRunning do
                local success, error = pcall(function()
                    local ohString1 = "arrow_knock_back_damage"
                    local ohInstance2 = game:GetService("Players").LocalPlayer
                    local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    local ohInstance4 = game:GetService("Workspace").Mobs.Bosses.Tengen.Tengen
                    local ohNumber5 = 999999999
                    local ohNumber6 = 999999999
 
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
                end)
 
                if not success then
                end
 
                if someCondition then
                    isRunning = false
                end
 
                wait(0.001)
            end
        end
    end,
 })

 local Toggle = ArrowGKA:CreateToggle({
    Name = "Douma",
    CurrentValue = false,
    Callback = function(Value)
        isRunning = Value
 
        if isRunning then
            while isRunning do
                local success, error = pcall(function()
                    local ohString1 = "arrow_knock_back_damage"
                    local ohInstance2 = game:GetService("Players").LocalPlayer
                    local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                    local ohInstance4 = game:GetService("Workspace").Mobs.Bosses.Douma.Douma
                    local ohNumber5 = 999999999
                    local ohNumber6 = 999999999
 
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
                end)
 
                if not success then
                end
 
                if someCondition then
                    isRunning = false
                end
 
                wait(0.001)
            end
        end
    end,
 })


Bypasses:CreateToggle({
    Name = "Thunder Bypass",
    Callback = function(v)
        _G.thunderbypass = v
        thunderbypass()
    end
})

function thunderbypass()
    if _G.thunderbypass then
        loop = true
    else
        loop = false
    end
    
    while loop do
local ohString1 = "skil_ting_asd"
local ohInstance2 = game:GetService("Players").LocalPlayer
local ohString3 = "Thunderbreathingrapidslashes"
local ohNumber4 = 5

game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
        wait(8)
    end
end

function thunderglobal()
    if _G.thunderkillaura then 
        globalkill1 = true
    else
        globalkill1 = false
    end

    while globalkill1 do
        local success, error = pcall(function()
        local LP = game:GetService("Players").LocalPlayer
local ohString1 = "ricespiritdamage"
local ohInstance2 = game:GetService("Players").LocalPlayer
local ohCFrame3 = LP.Character.HumanoidRootPart.CFrame
local ohNumber4 = 60

game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohCFrame3, ohNumber4)
        end)

        if not success then
        end

        if someCondition then
            isRunning = false
        end

        wait(0.55)
    end
end

            local LP = game:GetService("Players").LocalPlayer
            local runLoop = false
            
            local function invokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
                game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
            end

local Toggle = FarmAll:CreateToggle({

   Name = "Auto Eat Soul",
   CurrentValue = false,
   Callback = function(enabled)
      while enabled do
         pcall(function()
            workspace.Debree.Soul.Handle.Eatthedamnsoul:FireServer()
         end)
         wait(0.1)
      end
   end,
})


local Toggle = ArrowGKA2:CreateToggle({
    Name = "Inosuke",
    CurrentValue = false,
    Callback = function(value)
        runLoop = value
        if runLoop then
            while runLoop do
                local success, error = pcall(function()
                    local playerName = game.Players.LocalPlayer.Name
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    local propertyName = playerName .. "'s arrow"
                    invokeServer("Koketsu_arrow_damage", workspace[playerName], workspace.Debree[propertyName], LP.Character.HumanoidRootPart.CFrame, game:GetService("Workspace").Mobs.Bosses.Inosuke.Inosuke, 0)
                    invokeServer("arrow_knock_back_damage", game:GetService("Players").LocalPlayer, CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1), game:GetService("Workspace").Mobs.Bosses.Inosuke.Inosuke, 999999999, 999999999)
                end)
                
                if not success then
                end
                
                wait(0.005)
            end
        end
    end,
})
            

local Toggle = ArrowGKA2:CreateToggle({
    Name = "Muichiro",
    CurrentValue = false,
    Callback = function(value)
        runLoop = value
        if runLoop then
            while runLoop do
                local success, error = pcall(function()
                    local playerName = game.Players.LocalPlayer.Name
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    local propertyName = playerName .. "'s arrow"
                    invokeServer("Koketsu_arrow_damage", workspace[playerName], workspace.Debree[propertyName], LP.Character.HumanoidRootPart.CFrame, game:GetService("Workspace").Mobs.Bosses.Muichiro["Muichiro Tokito"], 0)
                    invokeServer("arrow_knock_back_damage", game:GetService("Players").LocalPlayer, CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1), game:GetService("Workspace").Mobs.Bosses.Muichiro["Muichiro Tokito"], 999999999, 999999999)
                end)
                
                if not success then
                end
                
                wait(0.005)
            end
        end
    end,
})

local Toggle = ArrowGKA2:CreateToggle({
    Name = "Sound Trainer",
    CurrentValue = false,
    Callback = function(value)
        runLoop = value
        if runLoop then
            while runLoop do
                local success, error = pcall(function()
                    local playerName = game.Players.LocalPlayer.Name
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    local propertyName = playerName .. "'s arrow"
                    invokeServer("Koketsu_arrow_damage", workspace[playerName], workspace.Debree[propertyName], LP.Character.HumanoidRootPart.CFrame, game:GetService("Workspace").Mobs.Bosses["Sound_Trainee"]["Sound Trainee"]["Sound Trainee"], 0)
                    invokeServer("arrow_knock_back_damage", game:GetService("Players").LocalPlayer, CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1), game:GetService("Workspace").Mobs.Bosses["Sound_Trainee"]["Sound Trainee"]["Sound Trainee"], 999999999, 999999999)
                end)
                
                if not success then
                end
                
                wait(0.005)
            end
        end
    end,
})


local Toggle = ArrowGKA2:CreateToggle({
    Name = "Snow Trainer",
    CurrentValue = false,
    Callback = function(value)
        runLoop = value
        if runLoop then
            while runLoop do
                local success, error = pcall(function()
                    local playerName = game.Players.LocalPlayer.Name
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    local propertyName = playerName .. "'s arrow"
                    invokeServer("Koketsu_arrow_damage", workspace[playerName], workspace.Debree[propertyName], LP.Character.HumanoidRootPart.CFrame, game:GetService("Workspace").Mobs.Bosses["Snow_Trainee"]["Snow Trainee"]["Snow Trainee"], 0)
                    invokeServer("arrow_knock_back_damage", game:GetService("Players").LocalPlayer, CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1), game:GetService("Workspace").Mobs.Bosses["Snow_Trainee"]["Snow Trainee"]["Snow Trainee"], 999999999, 999999999)
                end)
                
                if not success then
                end
                
                wait(0.005)
            end
        end
    end,
})

local Toggle = ArrowGKA2:CreateToggle({
    Name = "Swampy",
    CurrentValue = false,
    Callback = function(value)
        runLoop = value
        if runLoop then
            while runLoop do
                local success, error = pcall(function()
                    local playerName = game.Players.LocalPlayer.Name
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    local propertyName = playerName .. "'s arrow"
                    invokeServer("Koketsu_arrow_damage", workspace[playerName], workspace.Debree[propertyName], LP.Character.HumanoidRootPart.CFrame, game:GetService("Workspace").Mobs.Bosses.Swampy.Swampy, 0)
                    invokeServer("arrow_knock_back_damage", game:GetService("Players").LocalPlayer, CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1), game:GetService("Workspace").Mobs.Bosses.Swampy.Swampy, 999999999, 999999999)
                end)
                
                if not success then
                end
                
                wait(0.005)
            end
        end
    end,
})

local Toggle = ArrowGKA2:CreateToggle({
    Name = "Renpeke",
    CurrentValue = false,
    Callback = function(value)
        runLoop = value
        if runLoop then
            while runLoop do
                local success, error = pcall(function()
                    local playerName = game.Players.LocalPlayer.Name
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    local propertyName = playerName .. "'s arrow"
                    invokeServer("Koketsu_arrow_damage", workspace[playerName], workspace.Debree[propertyName], LP.Character.HumanoidRootPart.CFrame, game:GetService("Workspace").Mobs.Bosses["Flame Trainee"].Renpeke, 0)
                    invokeServer("arrow_knock_back_damage", game:GetService("Players").LocalPlayer, CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1), game:GetService("Workspace").Mobs.Bosses["Flame Trainee"].Renpeke, 999999999, 999999999)
                end)
                
                if not success then
                end
                
                wait(0.005)
            end
        end
    end,
})

local Toggle = ArrowGKA2:CreateToggle({
    Name = "Akeza",
    CurrentValue = false,
    Callback = function(value)
        runLoop = value
        if runLoop then
            while runLoop do
                local success, error = pcall(function()
                    local playerName = game.Players.LocalPlayer.Name
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    local propertyName = playerName .. "'s arrow"
                    invokeServer("Koketsu_arrow_damage", workspace[playerName], workspace.Debree[propertyName], LP.Character.HumanoidRootPart.CFrame, game:GetService("Workspace").Mobs.Bosses.Akaza.Akeza, 0)
                    invokeServer("arrow_knock_back_damage", game:GetService("Players").LocalPlayer, CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1), game:GetService("Workspace").Mobs.Bosses.Akaza.Akeza, 999999999, 999999999)
                end)
                
                if not success then
                end
                
                wait(0.005)
            end
        end
    end,
})

local Toggle = ArrowGKA2:CreateToggle({
    Name = "Rengoku",
    CurrentValue = false,
    Callback = function(value)
        runLoop = value
        if runLoop then
            while runLoop do
                local success, error = pcall(function()
                    local playerName = game.Players.LocalPlayer.Name
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    local propertyName = playerName .. "'s arrow"
                    invokeServer("Koketsu_arrow_damage", workspace[playerName], workspace.Debree[propertyName], LP.Character.HumanoidRootPart.CFrame, game:GetService("Workspace").Mobs.Bosses.Rengoku.Rengoku, 0)
                    invokeServer("arrow_knock_back_damage", game:GetService("Players").LocalPlayer, CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1), game:GetService("Workspace").Mobs.Bosses.Rengoku.Rengoku, 999999999, 999999999)
                end)
                
                if not success then
                end
                
                wait(0.005)
            end
        end
    end,
})

local Toggle = ArrowGKA2:CreateToggle({
    Name = "Tengay",
    CurrentValue = false,
    Callback = function(value)
        runLoop = value
        if runLoop then
            while runLoop do
                local success, error = pcall(function()
                    local playerName = game.Players.LocalPlayer.Name
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    local propertyName = playerName .. "'s arrow"
                    invokeServer("Koketsu_arrow_damage", workspace[playerName], workspace.Debree[propertyName], LP.Character.HumanoidRootPart.CFrame, game:GetService("Workspace").Mobs.Bosses.Tengen.Tengen, 0)
                    invokeServer("arrow_knock_back_damage", game:GetService("Players").LocalPlayer, CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1), game:GetService("Workspace").Mobs.Bosses.Tengen.Tengen, 999999999, 999999999)
                end)
                
                if not success then
                end
                
                wait(0.005)
            end
        end
    end,
})

local Toggle = ArrowGKA2:CreateToggle({
    Name = "Douma",
    CurrentValue = false,
    Callback = function(value)
        runLoop = value
        if runLoop then
            while runLoop do
                local success, error = pcall(function()
                    local playerName = game.Players.LocalPlayer.Name
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
                    local propertyName = playerName .. "'s arrow"
                    invokeServer("Koketsu_arrow_damage", workspace[playerName], workspace.Debree[propertyName], LP.Character.HumanoidRootPart.CFrame, game:GetService("Workspace").Mobs.Bosses.Douma.Douma, 0)
                    invokeServer("arrow_knock_back_damage", game:GetService("Players").LocalPlayer, CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1), game:GetService("Workspace").Mobs.Bosses.Douma.Douma, 999999999, 999999999)
                end)
                
                if not success then
                end
                
                wait(0.005)
            end
        end
    end,
})

local Toggle = FarmAll:CreateToggle({
    Name = "Farm All (Arrow 1)",
    CurrentValue = false,
    Callback = function(v)
    _G.arrowka1 = v

    arrowglobal1()
    end
    
    })

function arrowglobal1()
    if _G.arrowka1 then 
        globalkill2 = true
    else
        globalkill2 = false
    end

    while globalkill2 do
        local success, error = pcall(function()
            local ohString1 = "arrow_knock_back_damage"
            local ohInstance2 = game:GetService("Players").LocalPlayer
            local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
            local ohInstance4 = findMob1()
            local ohNumber5 = 999999999
            local ohNumber6 = 999999999

            game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
        end)

        if not success then
        end

        if someCondition then
            isRunning = false
        end

        wait()
    end
end
function arrowglobal1()
    if _G.arrowka1 then 
        globalkill2 = true
    else
        globalkill2 = false
    end

    while globalkill2 do
        local success, error = pcall(function()
            local ohString1 = "arrow_knock_back_damage"
            local ohInstance2 = game:GetService("Players").LocalPlayer
            local ohCFrame3 = CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1)
            local ohInstance4 = findMob1()
            local ohNumber5 = 999999999
            local ohNumber6 = 999999999

            game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(ohString1, ohInstance2, ohCFrame3, ohInstance4, ohNumber5, ohNumber6)
        end)

        if not success then
        end

        if someCondition then
            isRunning = false
        end

        wait()
    end
end

local Toggle = FarmAll:CreateToggle({
    Name = "Farm All (Arrow 2)",
    CurrentValue = false,
    Callback = function(v)
        _G.arrowka2 = v
        arrowglobal2()
    end
})

function arrowglobal2()
    if _G.arrowka2 then 
        globalkill3 = true
    else
        globalkill3 = false
    end

    while globalkill3 do
        local success, error = pcall(function()
            local playerName = game.Players.LocalPlayer.Name
            local LP = game:GetService("Players").LocalPlayer
            invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
            invokeServer("Arrow_knock_back_throw", LP, workspace[playerName].HumanoidRootPart, LP.Character.HumanoidRootPart.CFrame, nil, 0.0)
            local propertyName = playerName .. "'s arrow"
            invokeServer("Koketsu_arrow_damage", workspace[playerName], workspace.Debree[propertyName], LP.Character.HumanoidRootPart.CFrame, findMob1(), 0)
            invokeServer("arrow_knock_back_damage", game:GetService("Players").LocalPlayer, CFrame.new(2774.44531, 674.729919, -832.578796, 1, 0, 0, 0, 1, 0, 0, 0, 1), findMob1(), 999999999, 999999999)
        end)

        if not success then
        end

        wait()
    end
end
